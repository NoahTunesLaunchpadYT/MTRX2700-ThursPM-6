
task1.4.2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000368  08000368  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000368  08000368  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000368  08000368  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000368  08000368  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000368  08000368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000370  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0000001c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000143  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000105  00000000  00000000  000201be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  000202c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  0002030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00020338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000000d6  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  00020456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00020470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000350 	.word	0x08000350

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000350 	.word	0x08000350

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4833      	ldr	r0, [pc, #204]	; (80002a4 <decrement_led_pattern_link+0x12>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOA
 80001e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	LDR R1, [R0, #MODER]
 80001e4:	6801      	ldr	r1, [r0, #0]
	BIC R1, R1, #0x3
 80001e6:	f021 0103 	bic.w	r1, r1, #3
	STR R1, [R0, #MODER]
 80001ea:	6001      	str	r1, [r0, #0]

	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001ec:	482e      	ldr	r0, [pc, #184]	; (80002a8 <decrement_led_pattern_link+0x16>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001ee:	f245 5155 	movw	r1, #21845	; 0x5555
							 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001f2:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15

	BX LR @ return from function call
 80001f4:	4770      	bx	lr

080001f6 <increment_pattern>:
.syntax unified
.thumb

increment_pattern:
    PUSH {LR} @put on the stack
 80001f6:	b500      	push	{lr}
    LDR R2, =Buffer_LED_Pattern
 80001f8:	4a2c      	ldr	r2, [pc, #176]	; (80002ac <decrement_led_pattern_link+0x1a>)
    LDR R3, [R2]
 80001fa:	6813      	ldr	r3, [r2, #0]
    MOVS R4, #1
 80001fc:	2401      	movs	r4, #1

080001fe <find_next_led>:

find_next_led:
    TST R3, R4
 80001fe:	4223      	tst	r3, r4
    BNE already_on
 8000200:	d103      	bne.n	800020a <already_on>
    ORR R3, R3, R4
 8000202:	ea43 0304 	orr.w	r3, r3, r4
    STR R3, [R2]
 8000206:	6013      	str	r3, [r2, #0]
    POP {PC} @take off the stack
 8000208:	bd00      	pop	{pc}

0800020a <already_on>:

already_on:
    LSL R4, R4, #1
 800020a:	ea4f 0444 	mov.w	r4, r4, lsl #1
    CMP R4, #0
 800020e:	2c00      	cmp	r4, #0
    BEQ all_leds_on
 8000210:	d000      	beq.n	8000214 <all_leds_on>
    B find_next_led
 8000212:	e7f4      	b.n	80001fe <find_next_led>

08000214 <all_leds_on>:

all_leds_on:
    MOVS R3, #1
 8000214:	2301      	movs	r3, #1
    STR R3, [R2]
 8000216:	6013      	str	r3, [r2, #0]
    POP {PC}
 8000218:	bd00      	pop	{pc}

0800021a <decrement_pattern>:
.syntax  unified
.thumb

decrement_pattern:
    PUSH {LR}
 800021a:	b500      	push	{lr}
    LDR R2, =Buffer_LED_Pattern
 800021c:	4a23      	ldr	r2, [pc, #140]	; (80002ac <decrement_led_pattern_link+0x1a>)
    LDR R3, [R2]
 800021e:	6813      	ldr	r3, [r2, #0]
    MOVS R4, #1
 8000220:	2401      	movs	r4, #1

08000222 <find_next_led_to_turn_off>:

    find_next_led_to_turn_off:
        TST R3, R4
 8000222:	4223      	tst	r3, r4
        BEQ next_led
 8000224:	d002      	beq.n	800022c <next_led>
        BICS R3, R3, R4
 8000226:	43a3      	bics	r3, r4
        STR R3, [R2]
 8000228:	6013      	str	r3, [r2, #0]
        POP {PC}
 800022a:	bd00      	pop	{pc}

0800022c <next_led>:

    next_led:
        LSL R4, R4, #1
 800022c:	ea4f 0444 	mov.w	r4, r4, lsl #1
        CMP R4, #0
 8000230:	2c00      	cmp	r4, #0
        BNE find_next_led_to_turn_off
 8000232:	d1f6      	bne.n	8000222 <find_next_led_to_turn_off>
        MOVS R3, #0x00        @ Reset pattern to all LEDs off
 8000234:	2300      	movs	r3, #0
        STR R3, [R2]
 8000236:	6013      	str	r3, [r2, #0]
        POP {PC}
 8000238:	bd00      	pop	{pc}

0800023a <delay>:

.extern DelayValue

@ Simple delay function
delay:
    PUSH {R8, LR}      @ Save R8 and Link Register
 800023a:	e92d 4100 	stmdb	sp!, {r8, lr}
    LDR R8, =DelayValue @ Load address of DelayValue
 800023e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80002b0 <decrement_led_pattern_link+0x1e>
    LDR R8, [R8]        @ Load actual delay value into R8
 8000242:	f8d8 8000 	ldr.w	r8, [r8]

08000246 <delay_loop>:
    delay_loop:
        SUBS R8, R8, #1  @ Decrement R8
 8000246:	f1b8 0801 	subs.w	r8, r8, #1
        BNE delay_loop   @ If R8 is not zero, continue looping
 800024a:	d1fc      	bne.n	8000246 <delay_loop>
    POP {R8, PC}        @ Restore R8 and return from function
 800024c:	e8bd 8100 	ldmia.w	sp!, {r8, pc}

08000250 <set_leds>:
Buffer_LED_Pattern: .word 0b00000000
DelayValue: .word 500000

.text
set_leds:
    LDR R1, =GPIOE
 8000250:	4915      	ldr	r1, [pc, #84]	; (80002a8 <decrement_led_pattern_link+0x16>)
    STRB R2, [R1, #ODR + 1]
 8000252:	754a      	strb	r2, [r1, #21]
    BX LR
 8000254:	4770      	bx	lr

08000256 <main>:

main:
    BL enable_peripheral_clocks
 8000256:	f7ff ffbd 	bl	80001d4 <enable_peripheral_clocks>
    BL initialise_discovery_board
 800025a:	f7ff ffc1 	bl	80001e0 <initialise_discovery_board>
    LDR R2, =Buffer_LED_Pattern
 800025e:	4a13      	ldr	r2, [pc, #76]	; (80002ac <decrement_led_pattern_link+0x1a>)
    LDR R2, [R2] @load buffer
 8000260:	6812      	ldr	r2, [r2, #0]
    B program_loop
 8000262:	e7ff      	b.n	8000264 <program_loop>

08000264 <program_loop>:

program_loop:
    LDR R0, =GPIOA
 8000264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    LDR R1, [R0, #IDR]
 8000268:	6901      	ldr	r1, [r0, #16]
    TST R1, #1 @check if button is on
 800026a:	f011 0f01 	tst.w	r1, #1
    BNE button_pressed
 800026e:	d102      	bne.n	8000276 <button_pressed>
    BL set_leds
 8000270:	f7ff ffee 	bl	8000250 <set_leds>
    B program_loop
 8000274:	e7f6      	b.n	8000264 <program_loop>

08000276 <button_pressed>:

button_pressed:
    LDR R0, =Buffer_LED_Pattern
 8000276:	480d      	ldr	r0, [pc, #52]	; (80002ac <decrement_led_pattern_link+0x1a>)
    LDR R0, [R0]
 8000278:	6800      	ldr	r0, [r0, #0]
    TST R0, #0x80 @test if R0 MSB is 1
 800027a:	f010 0f80 	tst.w	r0, #128	; 0x80
    BNE decrement_led_pattern_link @branch if MSB is a non-zero (not linked)
 800027e:	d108      	bne.n	8000292 <decrement_led_pattern_link>
    BL increment_pattern
 8000280:	f7ff ffb9 	bl	80001f6 <increment_pattern>
    BL delay
 8000284:	f7ff ffd9 	bl	800023a <delay>
    LDR R2, =Buffer_LED_Pattern
 8000288:	4a08      	ldr	r2, [pc, #32]	; (80002ac <decrement_led_pattern_link+0x1a>)
    LDR R2, [R2]
 800028a:	6812      	ldr	r2, [r2, #0]
    BL set_leds
 800028c:	f7ff ffe0 	bl	8000250 <set_leds>
    B program_loop
 8000290:	e7e8      	b.n	8000264 <program_loop>

08000292 <decrement_led_pattern_link>:

    decrement_led_pattern_link:
    BL decrement_pattern
 8000292:	f7ff ffc2 	bl	800021a <decrement_pattern>
    BL delay
 8000296:	f7ff ffd0 	bl	800023a <delay>
    LDR R2, =Buffer_LED_Pattern
 800029a:	4a04      	ldr	r2, [pc, #16]	; (80002ac <decrement_led_pattern_link+0x1a>)
    LDR R2, [R2]
 800029c:	6812      	ldr	r2, [r2, #0]
    BL set_leds
 800029e:	f7ff ffd7 	bl	8000250 <set_leds>
    B program_loop
 80002a2:	e7df      	b.n	8000264 <program_loop>
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80002a4:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80002a8:	48001000 	.word	0x48001000
    LDR R2, =Buffer_LED_Pattern
 80002ac:	20000000 	.word	0x20000000
    LDR R8, =DelayValue @ Load address of DelayValue
 80002b0:	20000004 	.word	0x20000004

080002b4 <Reset_Handler>:
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <LoopForever+0x2>)
 80002b6:	4685      	mov	sp, r0
 80002b8:	f3af 8000 	nop.w
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <LoopForever+0x6>)
 80002be:	490d      	ldr	r1, [pc, #52]	; (80002f4 <LoopForever+0xa>)
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <LoopForever+0xe>)
 80002c2:	2300      	movs	r3, #0
 80002c4:	e002      	b.n	80002cc <LoopCopyDataInit>

080002c6 <CopyDataInit>:
 80002c6:	58d4      	ldr	r4, [r2, r3]
 80002c8:	50c4      	str	r4, [r0, r3]
 80002ca:	3304      	adds	r3, #4

080002cc <LoopCopyDataInit>:
 80002cc:	18c4      	adds	r4, r0, r3
 80002ce:	428c      	cmp	r4, r1
 80002d0:	d3f9      	bcc.n	80002c6 <CopyDataInit>
 80002d2:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <LoopForever+0x12>)
 80002d4:	4c0a      	ldr	r4, [pc, #40]	; (8000300 <LoopForever+0x16>)
 80002d6:	2300      	movs	r3, #0
 80002d8:	e001      	b.n	80002de <LoopFillZerobss>

080002da <FillZerobss>:
 80002da:	6013      	str	r3, [r2, #0]
 80002dc:	3204      	adds	r2, #4

080002de <LoopFillZerobss>:
 80002de:	42a2      	cmp	r2, r4
 80002e0:	d3fb      	bcc.n	80002da <FillZerobss>
 80002e2:	f000 f811 	bl	8000308 <__libc_init_array>
 80002e6:	f7ff ffb6 	bl	8000256 <main>

080002ea <LoopForever>:
 80002ea:	e7fe      	b.n	80002ea <LoopForever>
 80002ec:	2000a000 	.word	0x2000a000
 80002f0:	20000000 	.word	0x20000000
 80002f4:	20000008 	.word	0x20000008
 80002f8:	08000370 	.word	0x08000370
 80002fc:	20000008 	.word	0x20000008
 8000300:	20000024 	.word	0x20000024

08000304 <ADC1_2_IRQHandler>:
 8000304:	e7fe      	b.n	8000304 <ADC1_2_IRQHandler>
	...

08000308 <__libc_init_array>:
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	4d0d      	ldr	r5, [pc, #52]	; (8000340 <__libc_init_array+0x38>)
 800030c:	4c0d      	ldr	r4, [pc, #52]	; (8000344 <__libc_init_array+0x3c>)
 800030e:	1b64      	subs	r4, r4, r5
 8000310:	10a4      	asrs	r4, r4, #2
 8000312:	2600      	movs	r6, #0
 8000314:	42a6      	cmp	r6, r4
 8000316:	d109      	bne.n	800032c <__libc_init_array+0x24>
 8000318:	4d0b      	ldr	r5, [pc, #44]	; (8000348 <__libc_init_array+0x40>)
 800031a:	4c0c      	ldr	r4, [pc, #48]	; (800034c <__libc_init_array+0x44>)
 800031c:	f000 f818 	bl	8000350 <_init>
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	10a4      	asrs	r4, r4, #2
 8000324:	2600      	movs	r6, #0
 8000326:	42a6      	cmp	r6, r4
 8000328:	d105      	bne.n	8000336 <__libc_init_array+0x2e>
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000330:	4798      	blx	r3
 8000332:	3601      	adds	r6, #1
 8000334:	e7ee      	b.n	8000314 <__libc_init_array+0xc>
 8000336:	f855 3b04 	ldr.w	r3, [r5], #4
 800033a:	4798      	blx	r3
 800033c:	3601      	adds	r6, #1
 800033e:	e7f2      	b.n	8000326 <__libc_init_array+0x1e>
 8000340:	08000368 	.word	0x08000368
 8000344:	08000368 	.word	0x08000368
 8000348:	08000368 	.word	0x08000368
 800034c:	0800036c 	.word	0x0800036c

08000350 <_init>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr

0800035c <_fini>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr
