
task1.4.2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000360  08000360  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000360  08000360  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000360  08000360  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000360  08000360  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000368  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0000001c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000129  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000089  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000202a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000008a  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  00020372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  0002038c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000348 	.word	0x08000348

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000348 	.word	0x08000348

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4831      	ldr	r0, [pc, #196]	; (800029c <decrement_led_pattern_link+0x14>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOA
 80001e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	LDR R1, [R0, #MODER]
 80001e4:	6801      	ldr	r1, [r0, #0]
	BIC R1, R1, #0x3
 80001e6:	f021 0103 	bic.w	r1, r1, #3
	STR R1, [R0, #MODER]
 80001ea:	6001      	str	r1, [r0, #0]

	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001ec:	482c      	ldr	r0, [pc, #176]	; (80002a0 <decrement_led_pattern_link+0x18>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001ee:	f245 5155 	movw	r1, #21845	; 0x5555
							 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001f2:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15

	BX LR @ return from function call
 80001f4:	4770      	bx	lr

080001f6 <set_leds>:
Buffer_LED_Pattern: .word 0b00000000
DelayValue: .word 500000

.text
set_leds:
    LDR R1, =GPIOE
 80001f6:	492a      	ldr	r1, [pc, #168]	; (80002a0 <decrement_led_pattern_link+0x18>)
    STRB R2, [R1, #ODR + 1]
 80001f8:	754a      	strb	r2, [r1, #21]
    BX LR
 80001fa:	4770      	bx	lr

080001fc <increment_led_pattern>:

increment_led_pattern:
    PUSH {LR}
 80001fc:	b500      	push	{lr}
    LDR R2, =Buffer_LED_Pattern
 80001fe:	4a29      	ldr	r2, [pc, #164]	; (80002a4 <decrement_led_pattern_link+0x1c>)
    LDR R3, [R2]
 8000200:	6813      	ldr	r3, [r2, #0]
    MOVS R4, #1
 8000202:	2401      	movs	r4, #1

08000204 <find_next_led>:

    find_next_led:
        TST R3, R4
 8000204:	4223      	tst	r3, r4
        BNE already_on
 8000206:	d103      	bne.n	8000210 <already_on>
        ORR R3, R3, R4
 8000208:	ea43 0304 	orr.w	r3, r3, r4
        STR R3, [R2]
 800020c:	6013      	str	r3, [r2, #0]
        POP {PC}
 800020e:	bd00      	pop	{pc}

08000210 <already_on>:

    already_on:
        LSL R4, R4, #1
 8000210:	ea4f 0444 	mov.w	r4, r4, lsl #1
        CMP R4, #0
 8000214:	2c00      	cmp	r4, #0
        BEQ all_leds_on
 8000216:	d000      	beq.n	800021a <all_leds_on>
        B find_next_led
 8000218:	e7f4      	b.n	8000204 <find_next_led>

0800021a <all_leds_on>:

    all_leds_on:
    	MOVS R3, #0xFF
 800021a:	23ff      	movs	r3, #255	; 0xff
        STR R3, [R2]
 800021c:	6013      	str	r3, [r2, #0]
        POP {PC}
 800021e:	bd00      	pop	{pc}

08000220 <decrement_led_pattern>:

decrement_led_pattern:
    PUSH {LR}
 8000220:	b500      	push	{lr}
    LDR R2, =Buffer_LED_Pattern
 8000222:	4a20      	ldr	r2, [pc, #128]	; (80002a4 <decrement_led_pattern_link+0x1c>)
    LDR R3, [R2]
 8000224:	6813      	ldr	r3, [r2, #0]
    MOVS R4, #1
 8000226:	2401      	movs	r4, #1

08000228 <find_next_led_to_turn_off>:

    find_next_led_to_turn_off:
        TST R3, R4
 8000228:	4223      	tst	r3, r4
        BEQ next_led
 800022a:	d002      	beq.n	8000232 <next_led>
        BICS R3, R3, R4
 800022c:	43a3      	bics	r3, r4
        STR R3, [R2]
 800022e:	6013      	str	r3, [r2, #0]
        POP {PC}
 8000230:	bd00      	pop	{pc}

08000232 <next_led>:

    next_led:
        LSL R4, R4, #1
 8000232:	ea4f 0444 	mov.w	r4, r4, lsl #1
        CMP R4, #0
 8000236:	2c00      	cmp	r4, #0
        BNE find_next_led_to_turn_off
 8000238:	d1f6      	bne.n	8000228 <find_next_led_to_turn_off>
        MOVS R3, #0x00        @ Reset pattern to all LEDs off
 800023a:	2300      	movs	r3, #0
        STR R3, [R2]
 800023c:	6013      	str	r3, [r2, #0]
        POP {PC}
 800023e:	bd00      	pop	{pc}

08000240 <delay>:

delay:
    PUSH {R5, LR}
 8000240:	b520      	push	{r5, lr}
    LDR R5, =DelayValue
 8000242:	4d19      	ldr	r5, [pc, #100]	; (80002a8 <decrement_led_pattern_link+0x20>)
    LDR R5, [R5]
 8000244:	682d      	ldr	r5, [r5, #0]

08000246 <delay_loop>:
    delay_loop:
        SUBS R5, R5, #1
 8000246:	3d01      	subs	r5, #1
        BNE delay_loop
 8000248:	d1fd      	bne.n	8000246 <delay_loop>
        POP {R5, PC}
 800024a:	bd20      	pop	{r5, pc}

0800024c <main>:

main:
    BL enable_peripheral_clocks
 800024c:	f7ff ffc2 	bl	80001d4 <enable_peripheral_clocks>
    BL initialise_discovery_board
 8000250:	f7ff ffc6 	bl	80001e0 <initialise_discovery_board>
    LDR R2, =Buffer_LED_Pattern
 8000254:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <decrement_led_pattern_link+0x1c>)
    LDR R2, [R2]
 8000256:	6812      	ldr	r2, [r2, #0]
    B program_loop
 8000258:	e7ff      	b.n	800025a <program_loop>

0800025a <program_loop>:

program_loop:
    LDR R0, =GPIOA
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    LDR R1, [R0, #IDR]
 800025e:	6901      	ldr	r1, [r0, #16]
    TST R1, #1
 8000260:	f011 0f01 	tst.w	r1, #1
    BNE button_pressed
 8000264:	d102      	bne.n	800026c <button_pressed>
    BL set_leds
 8000266:	f7ff ffc6 	bl	80001f6 <set_leds>
    B program_loop
 800026a:	e7f6      	b.n	800025a <program_loop>

0800026c <button_pressed>:

button_pressed:
    LDR R0, =Buffer_LED_Pattern
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <decrement_led_pattern_link+0x1c>)
    LDR R0, [R0]
 800026e:	6800      	ldr	r0, [r0, #0]
    TST R0, #0x80
 8000270:	f010 0f80 	tst.w	r0, #128	; 0x80
    BNE decrement_led_pattern_link
 8000274:	d108      	bne.n	8000288 <decrement_led_pattern_link>
    BL increment_led_pattern
 8000276:	f7ff ffc1 	bl	80001fc <increment_led_pattern>
    BL delay
 800027a:	f7ff ffe1 	bl	8000240 <delay>
    LDR R2, =Buffer_LED_Pattern
 800027e:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <decrement_led_pattern_link+0x1c>)
    LDR R2, [R2]
 8000280:	6812      	ldr	r2, [r2, #0]
    BL set_leds
 8000282:	f7ff ffb8 	bl	80001f6 <set_leds>
    B program_loop
 8000286:	e7e8      	b.n	800025a <program_loop>

08000288 <decrement_led_pattern_link>:

    decrement_led_pattern_link:
    BL decrement_led_pattern
 8000288:	f7ff ffca 	bl	8000220 <decrement_led_pattern>
    BL delay
 800028c:	f7ff ffd8 	bl	8000240 <delay>
    LDR R2, =Buffer_LED_Pattern
 8000290:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <decrement_led_pattern_link+0x1c>)
    LDR R2, [R2]
 8000292:	6812      	ldr	r2, [r2, #0]
    BL set_leds
 8000294:	f7ff ffaf 	bl	80001f6 <set_leds>
    B program_loop
 8000298:	e7df      	b.n	800025a <program_loop>
 800029a:	0000      	.short	0x0000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 800029c:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80002a0:	48001000 	.word	0x48001000
    LDR R2, =Buffer_LED_Pattern
 80002a4:	20000000 	.word	0x20000000
    LDR R5, =DelayValue
 80002a8:	20000004 	.word	0x20000004

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f811 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ffb5 	bl	800024c <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80002f0:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002f4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80002f8:	20000024 	.word	0x20000024

080002fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC1_2_IRQHandler>
	...

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	4d0d      	ldr	r5, [pc, #52]	; (8000338 <__libc_init_array+0x38>)
 8000304:	4c0d      	ldr	r4, [pc, #52]	; (800033c <__libc_init_array+0x3c>)
 8000306:	1b64      	subs	r4, r4, r5
 8000308:	10a4      	asrs	r4, r4, #2
 800030a:	2600      	movs	r6, #0
 800030c:	42a6      	cmp	r6, r4
 800030e:	d109      	bne.n	8000324 <__libc_init_array+0x24>
 8000310:	4d0b      	ldr	r5, [pc, #44]	; (8000340 <__libc_init_array+0x40>)
 8000312:	4c0c      	ldr	r4, [pc, #48]	; (8000344 <__libc_init_array+0x44>)
 8000314:	f000 f818 	bl	8000348 <_init>
 8000318:	1b64      	subs	r4, r4, r5
 800031a:	10a4      	asrs	r4, r4, #2
 800031c:	2600      	movs	r6, #0
 800031e:	42a6      	cmp	r6, r4
 8000320:	d105      	bne.n	800032e <__libc_init_array+0x2e>
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f855 3b04 	ldr.w	r3, [r5], #4
 8000328:	4798      	blx	r3
 800032a:	3601      	adds	r6, #1
 800032c:	e7ee      	b.n	800030c <__libc_init_array+0xc>
 800032e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000332:	4798      	blx	r3
 8000334:	3601      	adds	r6, #1
 8000336:	e7f2      	b.n	800031e <__libc_init_array+0x1e>
 8000338:	08000360 	.word	0x08000360
 800033c:	08000360 	.word	0x08000360
 8000340:	08000360 	.word	0x08000360
 8000344:	08000364 	.word	0x08000364

08000348 <_init>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr

08000354 <_fini>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr
