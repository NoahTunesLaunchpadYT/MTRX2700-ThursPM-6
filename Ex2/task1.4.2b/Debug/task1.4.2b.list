
task1.4.2b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000328  08000328  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000328  08000328  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000328  08000328  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000328  08000328  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000328  08000328  00010328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000330  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000001c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000120  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000ea  00000000  00000000  0002019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  000202d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000202f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000000d7  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  00020417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00020430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000310 	.word	0x08000310

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000310 	.word	0x08000310

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4822      	ldr	r0, [pc, #136]	; (8000260 <button_pressed+0x12>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOA
 80001e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	LDR R1, [R0, #MODER]
 80001e4:	6801      	ldr	r1, [r0, #0]
	BIC R1, R1, #0x3
 80001e6:	f021 0103 	bic.w	r1, r1, #3
	STR R1, [R0, #MODER]
 80001ea:	6001      	str	r1, [r0, #0]

	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001ec:	481d      	ldr	r0, [pc, #116]	; (8000264 <button_pressed+0x16>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001ee:	f245 5155 	movw	r1, #21845	; 0x5555
							 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001f2:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15

	BX LR @ return from function call
 80001f4:	4770      	bx	lr

080001f6 <increment_pattern>:
.thumb

@.global increment_pattern

increment_pattern:
    PUSH {LR} @put on the stack
 80001f6:	b500      	push	{lr}
    LDR R2, =Buffer_LED_Pattern
 80001f8:	4a1b      	ldr	r2, [pc, #108]	; (8000268 <button_pressed+0x1a>)
    LDR R3, [R2]
 80001fa:	6813      	ldr	r3, [r2, #0]
    MOVS R4, #1
 80001fc:	2401      	movs	r4, #1

080001fe <find_next_led>:

find_next_led:
    TST R3, R4
 80001fe:	4223      	tst	r3, r4
    BNE already_on
 8000200:	d103      	bne.n	800020a <already_on>
    ORR R3, R3, R4
 8000202:	ea43 0304 	orr.w	r3, r3, r4
    STR R3, [R2]
 8000206:	6013      	str	r3, [r2, #0]
    POP {PC} @take off the stack
 8000208:	bd00      	pop	{pc}

0800020a <already_on>:

already_on:
    LSL R4, R4, #1 @shift left
 800020a:	ea4f 0444 	mov.w	r4, r4, lsl #1
    CMP R4, #0 @if R4=0, all leds are on
 800020e:	2c00      	cmp	r4, #0
    BEQ all_leds_on
 8000210:	d000      	beq.n	8000214 <all_leds_on>
    B find_next_led
 8000212:	e7f4      	b.n	80001fe <find_next_led>

08000214 <all_leds_on>:

all_leds_on:
    MOVS R3, #1
 8000214:	2301      	movs	r3, #1
    STR R3, [R2]
 8000216:	6013      	str	r3, [r2, #0]
    POP {PC} @return
 8000218:	bd00      	pop	{pc}

0800021a <set_leds>:
DelayValue: .word 500000

.text

set_leds:
	LDR R1, =GPIOE
 800021a:	4912      	ldr	r1, [pc, #72]	; (8000264 <button_pressed+0x16>)
    STRB R2, [R1, #ODR + 1]
 800021c:	754a      	strb	r2, [r1, #21]
    BX LR
 800021e:	4770      	bx	lr

08000220 <delay>:


delay:
    PUSH {R5, LR}
 8000220:	b520      	push	{r5, lr}
    LDR R5, =DelayValue
 8000222:	4d12      	ldr	r5, [pc, #72]	; (800026c <button_pressed+0x1e>)
    LDR R5, [R5]
 8000224:	682d      	ldr	r5, [r5, #0]

08000226 <delay_loop>:
delay_loop:
    SUBS R5, R5, #1
 8000226:	3d01      	subs	r5, #1
    BNE delay_loop
 8000228:	d1fd      	bne.n	8000226 <delay_loop>
    POP {R5, PC}
 800022a:	bd20      	pop	{r5, pc}

0800022c <main>:


main:
	BL enable_peripheral_clocks
 800022c:	f7ff ffd2 	bl	80001d4 <enable_peripheral_clocks>
	BL initialise_discovery_board
 8000230:	f7ff ffd6 	bl	80001e0 <initialise_discovery_board>
	LDR R2, =Default_LED_Pattern
 8000234:	4a0e      	ldr	r2, [pc, #56]	; (8000270 <button_pressed+0x22>)
	LDR R2, [R2] @load actaul pattern
 8000236:	6812      	ldr	r2, [r2, #0]


	LDR R0, =GPIOA @button
 8000238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	LDR R1, =GPIOE @LEDs
 800023c:	4909      	ldr	r1, [pc, #36]	; (8000264 <button_pressed+0x16>)

	B program_loop
 800023e:	e7ff      	b.n	8000240 <program_loop>

08000240 <program_loop>:

program_loop:

	LDR R0, =GPIOA
 8000240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	LDR R1, [R0, #IDR]
 8000244:	6901      	ldr	r1, [r0, #16]
	TST R1, #1 @test if button is not pressed
 8000246:	f011 0f01 	tst.w	r1, #1
	BNE button_pressed @branch if not equal
 800024a:	d100      	bne.n	800024e <button_pressed>

	B program_loop
 800024c:	e7f8      	b.n	8000240 <program_loop>

0800024e <button_pressed>:

button_pressed:
	BL increment_pattern @change pattern
 800024e:	f7ff ffd2 	bl	80001f6 <increment_pattern>
	BL delay @call delay
 8000252:	f7ff ffe5 	bl	8000220 <delay>
    LDR R2, =Buffer_LED_Pattern @resets R2 to default buffer
 8000256:	4a04      	ldr	r2, [pc, #16]	; (8000268 <button_pressed+0x1a>)
    LDR R2, [R2]
 8000258:	6812      	ldr	r2, [r2, #0]
    BL set_leds
 800025a:	f7ff ffde 	bl	800021a <set_leds>

    B program_loop
 800025e:	e7ef      	b.n	8000240 <program_loop>
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000260:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000264:	48001000 	.word	0x48001000
    LDR R2, =Buffer_LED_Pattern
 8000268:	20000004 	.word	0x20000004
    LDR R5, =DelayValue
 800026c:	20000008 	.word	0x20000008
	LDR R2, =Default_LED_Pattern
 8000270:	20000000 	.word	0x20000000

08000274 <Reset_Handler>:
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LoopForever+0x2>)
 8000276:	4685      	mov	sp, r0
 8000278:	f3af 8000 	nop.w
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <LoopForever+0x6>)
 800027e:	490d      	ldr	r1, [pc, #52]	; (80002b4 <LoopForever+0xa>)
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <LoopForever+0xe>)
 8000282:	2300      	movs	r3, #0
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:
 8000286:	58d4      	ldr	r4, [r2, r3]
 8000288:	50c4      	str	r4, [r0, r3]
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:
 800028c:	18c4      	adds	r4, r0, r3
 800028e:	428c      	cmp	r4, r1
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <LoopForever+0x12>)
 8000294:	4c0a      	ldr	r4, [pc, #40]	; (80002c0 <LoopForever+0x16>)
 8000296:	2300      	movs	r3, #0
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:
 800029e:	42a2      	cmp	r2, r4
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>
 80002a2:	f000 f811 	bl	80002c8 <__libc_init_array>
 80002a6:	f7ff ffc1 	bl	800022c <main>

080002aa <LoopForever>:
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
 80002ac:	2000a000 	.word	0x2000a000
 80002b0:	20000000 	.word	0x20000000
 80002b4:	2000000c 	.word	0x2000000c
 80002b8:	08000330 	.word	0x08000330
 80002bc:	2000000c 	.word	0x2000000c
 80002c0:	20000028 	.word	0x20000028

080002c4 <ADC1_2_IRQHandler>:
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>
	...

080002c8 <__libc_init_array>:
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	4d0d      	ldr	r5, [pc, #52]	; (8000300 <__libc_init_array+0x38>)
 80002cc:	4c0d      	ldr	r4, [pc, #52]	; (8000304 <__libc_init_array+0x3c>)
 80002ce:	1b64      	subs	r4, r4, r5
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	2600      	movs	r6, #0
 80002d4:	42a6      	cmp	r6, r4
 80002d6:	d109      	bne.n	80002ec <__libc_init_array+0x24>
 80002d8:	4d0b      	ldr	r5, [pc, #44]	; (8000308 <__libc_init_array+0x40>)
 80002da:	4c0c      	ldr	r4, [pc, #48]	; (800030c <__libc_init_array+0x44>)
 80002dc:	f000 f818 	bl	8000310 <_init>
 80002e0:	1b64      	subs	r4, r4, r5
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	2600      	movs	r6, #0
 80002e6:	42a6      	cmp	r6, r4
 80002e8:	d105      	bne.n	80002f6 <__libc_init_array+0x2e>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f0:	4798      	blx	r3
 80002f2:	3601      	adds	r6, #1
 80002f4:	e7ee      	b.n	80002d4 <__libc_init_array+0xc>
 80002f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fa:	4798      	blx	r3
 80002fc:	3601      	adds	r6, #1
 80002fe:	e7f2      	b.n	80002e6 <__libc_init_array+0x1e>
 8000300:	08000328 	.word	0x08000328
 8000304:	08000328 	.word	0x08000328
 8000308:	08000328 	.word	0x08000328
 800030c:	0800032c 	.word	0x0800032c

08000310 <_init>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr

0800031c <_fini>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr
