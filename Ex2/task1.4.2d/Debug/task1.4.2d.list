
task1.4.2d.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000370  08000370  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000370  08000370  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000370  08000370  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000370  08000370  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000374  08000374  00010374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000378  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000001c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000179  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000b6  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0000006c  00000000  00000000  000202ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000003a  00000000  00000000  00020326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000068  00000000  00000000  00020360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000000ab  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  00020473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  0002048c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000358 	.word	0x08000358

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000358 	.word	0x08000358

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	482b      	ldr	r0, [pc, #172]	; (8000284 <delay_loop+0xc>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R7, =GPIOA
 80001e0:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
	LDR R4, [R7, #MODER]
 80001e4:	683c      	ldr	r4, [r7, #0]
	BIC R4, R4, #0x3
 80001e6:	f024 0403 	bic.w	r4, r4, #3
	STR R4, [R7, #MODER]
 80001ea:	603c      	str	r4, [r7, #0]

	LDR R5, =GPIOE 	@ load the address of the GPIOE register into R0
 80001ec:	4d26      	ldr	r5, [pc, #152]	; (8000288 <delay_loop+0x10>)
	LDR R6, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001ee:	f245 5655 	movw	r6, #21845	; 0x5555
							 @ as 0x5555 = 01010101 01010101
	STRH R6, [R5, #MODER + 2]   @ store the new register values in the top half word representing
 80001f2:	806e      	strh	r6, [r5, #2]
								@ the MODER settings for pe8-15

	BX LR @ return from function call
 80001f4:	4770      	bx	lr

080001f6 <count_character1>:

@ R0 = ASCII value of character
@ R1 = Pointer to string
@ Returns count in R0
count_character1:
    PUSH {R2, R3, LR}
 80001f6:	b50c      	push	{r2, r3, lr}
    MOVS R0, R2
 80001f8:	0010      	movs	r0, r2
    MOVS R3, #0
 80001fa:	2300      	movs	r3, #0

080001fc <count_loop>:

count_loop:
    LDRB R0, [R1], #1 @Load byte from string and post-increment address
 80001fc:	f811 0b01 	ldrb.w	r0, [r1], #1
    CMP R0, #0 @Cmp byte to null
 8000200:	2800      	cmp	r0, #0
    BEQ count_done @If null end
 8000202:	d003      	beq.n	800020c <count_done>
    CMP R0, R2 @Cmp letter
 8000204:	4290      	cmp	r0, r2
    BNE count_loop @If not continue
 8000206:	d1f9      	bne.n	80001fc <count_loop>
    ADDS R3, R3, #1
 8000208:	3301      	adds	r3, #1
    B count_loop
 800020a:	e7f7      	b.n	80001fc <count_loop>

0800020c <count_done>:

count_done:
    MOVS R0, R3
 800020c:	0018      	movs	r0, r3
    POP {R2, R3, PC}
 800020e:	bd0c      	pop	{r2, r3, pc}

08000210 <set_leds>:
Defaultletter: .asciz "a"

.text

set_leds: @R6 is the pattern
    LDR R5, =GPIOE
 8000210:	4d1d      	ldr	r5, [pc, #116]	; (8000288 <delay_loop+0x10>)
    STRB R6, [R5, #ODR + 1]
 8000212:	756e      	strb	r6, [r5, #21]
    BX LR
 8000214:	4770      	bx	lr

08000216 <main>:



main:
    BL enable_peripheral_clocks
 8000216:	f7ff ffdd 	bl	80001d4 <enable_peripheral_clocks>
    BL initialise_discovery_board
 800021a:	f7ff ffe1 	bl	80001e0 <initialise_discovery_board>

	LDR R6, =Default_LED_Pattern
 800021e:	4e1b      	ldr	r6, [pc, #108]	; (800028c <delay_loop+0x14>)
	LDR R6, [R6]
 8000220:	6836      	ldr	r6, [r6, #0]
	LDR R0, =Defaultletter @load addy
 8000222:	481b      	ldr	r0, [pc, #108]	; (8000290 <delay_loop+0x18>)
	LDRB R0, [R0] @load actaul letter
 8000224:	7800      	ldrb	r0, [r0, #0]
	LDR R1, =Word @load word
 8000226:	491b      	ldr	r1, [pc, #108]	; (8000294 <delay_loop+0x1c>)

	LDR R2, =Defaultletter
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <delay_loop+0x18>)
	LDRB R2, [R2] @load actual letter
 800022a:	7812      	ldrb	r2, [r2, #0]


	BL count_character1
 800022c:	f7ff ffe3 	bl	80001f6 <count_character1>
	BL create_led_pattern
 8000230:	f000 f834 	bl	800029c <create_led_pattern>
	LDR R1, =Word @load word
 8000234:	4917      	ldr	r1, [pc, #92]	; (8000294 <delay_loop+0x1c>)
	BL set_leds
 8000236:	f7ff ffeb 	bl	8000210 <set_leds>

0800023a <program_loop>:

program_loop: @check if button pressed

	BL delay
 800023a:	f000 f817 	bl	800026c <delay>

 	LDR R7, =GPIOA
 800023e:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
    LDR R4, [R7, #IDR]
 8000242:	693c      	ldr	r4, [r7, #16]
    TST R4, #1
 8000244:	f014 0f01 	tst.w	r4, #1
    BNE button_pressed
 8000248:	d100      	bne.n	800024c <button_pressed>

	B program_loop
 800024a:	e7f6      	b.n	800023a <program_loop>

0800024c <button_pressed>:

button_pressed:
	CMP R2, #122 @if letter =z load default letter
 800024c:	2a7a      	cmp	r2, #122	; 0x7a
	BEQ load_default
 800024e:	d00a      	beq.n	8000266 <load_default>
	ADD R2, R2, #1
 8000250:	f102 0201 	add.w	r2, r2, #1
	MOV R0, R2
 8000254:	4610      	mov	r0, r2

	LDR R1, =Word @load word
 8000256:	490f      	ldr	r1, [pc, #60]	; (8000294 <delay_loop+0x1c>)
	BL count_character1 @after this R0 contains letter count
 8000258:	f7ff ffcd 	bl	80001f6 <count_character1>
	BL create_led_pattern
 800025c:	f000 f81e 	bl	800029c <create_led_pattern>
	BL set_leds
 8000260:	f7ff ffd6 	bl	8000210 <set_leds>


	B program_loop
 8000264:	e7e9      	b.n	800023a <program_loop>

08000266 <load_default>:

load_default:
	LDR R2, =Defaultletter
 8000266:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <delay_loop+0x18>)
	LDRB R2, [R2]
 8000268:	7812      	ldrb	r2, [r2, #0]
	B program_loop
 800026a:	e7e6      	b.n	800023a <program_loop>

0800026c <delay>:



delay:
    PUSH {R8, LR}
 800026c:	e92d 4100 	stmdb	sp!, {r8, lr}
    LDR R8, =DelayValue
 8000270:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8000298 <delay_loop+0x20>
    LDR R8, [R8]
 8000274:	f8d8 8000 	ldr.w	r8, [r8]

08000278 <delay_loop>:
    delay_loop:
        SUBS R8, R8, #1
 8000278:	f1b8 0801 	subs.w	r8, r8, #1
        BNE delay_loop
 800027c:	d1fc      	bne.n	8000278 <delay_loop>
    POP {R8, PC}
 800027e:	e8bd 8100 	ldmia.w	sp!, {r8, pc}
 8000282:	0000      	.short	0x0000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000284:	40021000 	.word	0x40021000
	LDR R5, =GPIOE 	@ load the address of the GPIOE register into R0
 8000288:	48001000 	.word	0x48001000
	LDR R6, =Default_LED_Pattern
 800028c:	2000000b 	.word	0x2000000b
	LDR R0, =Defaultletter @load addy
 8000290:	20000013 	.word	0x20000013
	LDR R1, =Word @load word
 8000294:	20000000 	.word	0x20000000
    LDR R8, =DelayValue
 8000298:	2000000f 	.word	0x2000000f

0800029c <create_led_pattern>:

.global create_led_pattern
@ R0 = Number of LEDs to turn on
@ Resulting pattern is stored in R6
create_led_pattern:
    MOVS R6, #0x01@ Starting pattern 0b00000001
 800029c:	2601      	movs	r6, #1
    MOVS R9, R0
 800029e:	ea5f 0900 	movs.w	r9, r0
    CMP R0, #0
 80002a2:	2800      	cmp	r0, #0
    BEQ pattern_nothing
 80002a4:	d007      	beq.n	80002b6 <pattern_nothing>
    SUBS R0, R0, #1@ Sub 1 from R0
 80002a6:	3801      	subs	r0, #1

080002a8 <create_pattern_loop>:

create_pattern_loop:
    CMP R0, #0
 80002a8:	2800      	cmp	r0, #0
    BEQ pattern_done@ If R0 is 0, the pattern is complete
 80002aa:	d006      	beq.n	80002ba <pattern_done>
    LSLS R6, R6, #1@ Shift left by 1 bit
 80002ac:	0076      	lsls	r6, r6, #1
    ORRS R6, R6, #1@ OR the pattern to turn on the next LED
 80002ae:	f056 0601 	orrs.w	r6, r6, #1
    SUBS R0, R0, #1
 80002b2:	3801      	subs	r0, #1
    B create_pattern_loop
 80002b4:	e7f8      	b.n	80002a8 <create_pattern_loop>

080002b6 <pattern_nothing>:


pattern_nothing:
	MOVS R6, #0
 80002b6:	2600      	movs	r6, #0
	B pattern_done
 80002b8:	e7ff      	b.n	80002ba <pattern_done>

080002ba <pattern_done>:

pattern_done:
    BX LR
 80002ba:	4770      	bx	lr

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 f811 	bl	8000310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ff92 	bl	8000216 <main>

080002f2 <LoopForever>:

LoopForever:
  b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000300:	08000378 	.word	0x08000378
  ldr r2, =_sbss
 8000304:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000308:	20000034 	.word	0x20000034

0800030c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC1_2_IRQHandler>
	...

08000310 <__libc_init_array>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	4d0d      	ldr	r5, [pc, #52]	; (8000348 <__libc_init_array+0x38>)
 8000314:	4c0d      	ldr	r4, [pc, #52]	; (800034c <__libc_init_array+0x3c>)
 8000316:	1b64      	subs	r4, r4, r5
 8000318:	10a4      	asrs	r4, r4, #2
 800031a:	2600      	movs	r6, #0
 800031c:	42a6      	cmp	r6, r4
 800031e:	d109      	bne.n	8000334 <__libc_init_array+0x24>
 8000320:	4d0b      	ldr	r5, [pc, #44]	; (8000350 <__libc_init_array+0x40>)
 8000322:	4c0c      	ldr	r4, [pc, #48]	; (8000354 <__libc_init_array+0x44>)
 8000324:	f000 f818 	bl	8000358 <_init>
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	10a4      	asrs	r4, r4, #2
 800032c:	2600      	movs	r6, #0
 800032e:	42a6      	cmp	r6, r4
 8000330:	d105      	bne.n	800033e <__libc_init_array+0x2e>
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f855 3b04 	ldr.w	r3, [r5], #4
 8000338:	4798      	blx	r3
 800033a:	3601      	adds	r6, #1
 800033c:	e7ee      	b.n	800031c <__libc_init_array+0xc>
 800033e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000342:	4798      	blx	r3
 8000344:	3601      	adds	r6, #1
 8000346:	e7f2      	b.n	800032e <__libc_init_array+0x1e>
 8000348:	08000370 	.word	0x08000370
 800034c:	08000370 	.word	0x08000370
 8000350:	08000370 	.word	0x08000370
 8000354:	08000374 	.word	0x08000374

08000358 <_init>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr

08000364 <_fini>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr
