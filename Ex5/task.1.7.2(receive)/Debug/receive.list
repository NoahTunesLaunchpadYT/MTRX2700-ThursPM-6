
receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000234  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003c8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003c8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  080003d0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          0000001c  20000038  20000038  00020038  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000054  20000054  00020038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 14 .debug_line   000001bd  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000e0  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0000006c  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000003a  00000000  00000000  000203b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000068  00000000  00000000  000203f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000000b4  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  0002050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00020528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000038 	.word	0x20000038
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003b0 	.word	0x080003b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000003c 	.word	0x2000003c
 80001d0:	080003b0 	.word	0x080003b0

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4840      	ldr	r0, [pc, #256]	; (80002d8 <main+0x12>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOA
 80001e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	LDR R1, [R0, #MODER]
 80001e4:	6801      	ldr	r1, [r0, #0]
	BIC R1, R1, #0x3
 80001e6:	f021 0103 	bic.w	r1, r1, #3
	STR R1, [R0, #MODER]
 80001ea:	6001      	str	r1, [r0, #0]

	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001ec:	483b      	ldr	r0, [pc, #236]	; (80002dc <main+0x16>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001ee:	f245 5155 	movw	r1, #21845	; 0x5555
							 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001f2:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15

	BX LR @ return from function call
 80001f4:	4770      	bx	lr

080001f6 <count_character>:

@ R0 = ASCII value of character
@ R1 = Pointer to string
@ Returns count in R0
count_character:
    PUSH {R2, R3, LR}
 80001f6:	b50c      	push	{r2, r3, lr}
    MOVS R0, R2
 80001f8:	0010      	movs	r0, r2
    MOVS R3, #0
 80001fa:	2300      	movs	r3, #0

080001fc <count_loop>:

count_loop:
    LDRB R0, [R1], #1 @Load byte from string and post-increment address
 80001fc:	f811 0b01 	ldrb.w	r0, [r1], #1
    CMP R0, #0 @Cmp byte to null
 8000200:	2800      	cmp	r0, #0
    BEQ count_done @If null end
 8000202:	d003      	beq.n	800020c <count_done>
    CMP R0, R2 @Cmp letter
 8000204:	4290      	cmp	r0, r2
    BNE count_loop @If not continue
 8000206:	d1f9      	bne.n	80001fc <count_loop>
    ADDS R3, R3, #1
 8000208:	3301      	adds	r3, #1
    B count_loop
 800020a:	e7f7      	b.n	80001fc <count_loop>

0800020c <count_done>:

count_done:
    MOVS R0, R3
 800020c:	0018      	movs	r0, r3
    POP {R2, R3, PC}
 800020e:	bd0c      	pop	{r2, r3, pc}

08000210 <delay>:

.extern DelayValue

@ Simple delay function
delay:
    PUSH {R8, LR}      @ Save R8 and Link Register
 8000210:	e92d 4100 	stmdb	sp!, {r8, lr}
    LDR R8, =DelayValue @ Load address of DelayValue
 8000214:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80002e0 <main+0x1a>
    LDR R8, [R8]        @ Load actual delay value into R8
 8000218:	f8d8 8000 	ldr.w	r8, [r8]

0800021c <delay_loop>:
    delay_loop:
        SUBS R8, R8, #1  @ Decrement R8
 800021c:	f1b8 0801 	subs.w	r8, r8, #1
        BNE delay_loop   @ If R8 is not zero, continue looping
 8000220:	d1fc      	bne.n	800021c <delay_loop>
    POP {R8, PC}        @ Restore R8 and return from function
 8000222:	e8bd 8100 	ldmia.w	sp!, {r8, pc}

08000226 <set_leds>:
Defaultletter: .asciz "a"

.text

set_leds: @R6 is the pattern
    LDR R5, =GPIOE
 8000226:	4d2d      	ldr	r5, [pc, #180]	; (80002dc <main+0x16>)
    STRB R6, [R5, #ODR + 1]
 8000228:	756e      	strb	r6, [r5, #21]
    BX LR
 800022a:	4770      	bx	lr

0800022c <letter_counter>:


letter_counter:
    BL enable_peripheral_clocks
 800022c:	f7ff ffd2 	bl	80001d4 <enable_peripheral_clocks>
    BL initialise_discovery_board
 8000230:	f7ff ffd6 	bl	80001e0 <initialise_discovery_board>

	LDR R6, =Default_LED_Pattern
 8000234:	4e2b      	ldr	r6, [pc, #172]	; (80002e4 <main+0x1e>)
	LDR R6, [R6]
 8000236:	6836      	ldr	r6, [r6, #0]
	LDR R0, =Defaultletter @load addy
 8000238:	482b      	ldr	r0, [pc, #172]	; (80002e8 <main+0x22>)
	LDRB R0, [R0] @load actaul letter
 800023a:	7800      	ldrb	r0, [r0, #0]
	LDR R1, =Word @load word
 800023c:	492b      	ldr	r1, [pc, #172]	; (80002ec <main+0x26>)

	LDR R2, =Defaultletter
 800023e:	4a2a      	ldr	r2, [pc, #168]	; (80002e8 <main+0x22>)
	LDRB R2, [R2] @load actual letter
 8000240:	7812      	ldrb	r2, [r2, #0]


	BL count_character
 8000242:	f7ff ffd8 	bl	80001f6 <count_character>
	BL create_led_pattern
 8000246:	f000 f855 	bl	80002f4 <create_led_pattern>
	LDR R1, =Word @load word
 800024a:	4928      	ldr	r1, [pc, #160]	; (80002ec <main+0x26>)
	BL set_leds
 800024c:	f7ff ffeb 	bl	8000226 <set_leds>

08000250 <program_loop>:

program_loop: @check if button pressed

	BL delay
 8000250:	f7ff ffde 	bl	8000210 <delay>

 	LDR R7, =GPIOA
 8000254:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
    LDR R4, [R7, #IDR]
 8000258:	693c      	ldr	r4, [r7, #16]
    TST R4, #1
 800025a:	f014 0f01 	tst.w	r4, #1
    BNE button_pressed
 800025e:	d100      	bne.n	8000262 <button_pressed>

	B program_loop
 8000260:	e7f6      	b.n	8000250 <program_loop>

08000262 <button_pressed>:

button_pressed:
	CMP R2, #122 @if letter =z load default letter
 8000262:	2a7a      	cmp	r2, #122	; 0x7a
	BEQ load_default
 8000264:	d00a      	beq.n	800027c <load_default>
	ADD R2, R2, #1
 8000266:	f102 0201 	add.w	r2, r2, #1
	MOV R0, R2
 800026a:	4610      	mov	r0, r2

	LDR R1, =Word @load word
 800026c:	491f      	ldr	r1, [pc, #124]	; (80002ec <main+0x26>)
	BL count_character @after this R0 contains letter count
 800026e:	f7ff ffc2 	bl	80001f6 <count_character>
	BL create_led_pattern
 8000272:	f000 f83f 	bl	80002f4 <create_led_pattern>
	BL set_leds
 8000276:	f7ff ffd6 	bl	8000226 <set_leds>


	B program_loop
 800027a:	e7e9      	b.n	8000250 <program_loop>

0800027c <load_default>:

load_default:
	LDR R2, =Defaultletter
 800027c:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <main+0x22>)
	LDRB R2, [R2]
 800027e:	7812      	ldrb	r2, [r2, #0]
	B program_loop
 8000280:	e7e6      	b.n	8000250 <program_loop>

08000282 <decode>:

@R1 is the input word
@R4 is the output word

decode:
	PUSH {R2, R3, R5, LR} @on the stack
 8000282:	b52c      	push	{r2, r3, r5, lr}
    @LDR R1, =string
    LDR R2, =cipher @cipher value
 8000284:	4a1a      	ldr	r2, [pc, #104]	; (80002f0 <main+0x2a>)
    LDR R2, [R2]
 8000286:	6812      	ldr	r2, [r2, #0]

08000288 <convert_case>:

convert_case:

    LDRB R3, [R1]
 8000288:	780b      	ldrb	r3, [r1, #0]
    CMP R3, #0
 800028a:	2b00      	cmp	r3, #0
    BEQ done
 800028c:	d01a      	beq.n	80002c4 <done>

    SUBS R4, R3, #'A'
 800028e:	f1b3 0441 	subs.w	r4, r3, #65	; 0x41
    CMP R4, #26 @checking if outside of letter range
 8000292:	2c1a      	cmp	r4, #26
    BLT Letter_process @if more then it either lowercase or not a letter
 8000294:	db04      	blt.n	80002a0 <Letter_process>

    SUBS R4, R3, #'a'
 8000296:	f1b3 0461 	subs.w	r4, r3, #97	; 0x61
    CMP R4, #26 @checking if outside of letter range
 800029a:	2c1a      	cmp	r4, #26
    BLT Letter_process @if more then its not a letter
 800029c:	db00      	blt.n	80002a0 <Letter_process>

    B next_char
 800029e:	e00e      	b.n	80002be <next_char>

080002a0 <Letter_process>:

Letter_process:

    ADDS R4, R4, R2
 80002a0:	18a4      	adds	r4, r4, r2
    ADDS R4, R4, #26
 80002a2:	341a      	adds	r4, #26
    MOV R5, #26
 80002a4:	f04f 051a 	mov.w	r5, #26

080002a8 <MOD_loop>:

MOD_loop:

    SUBS R4, R4, R5
 80002a8:	1b64      	subs	r4, r4, r5
    BCS MOD_loop
 80002aa:	d2fd      	bcs.n	80002a8 <MOD_loop>

    ADD R4, R4, R5
 80002ac:	442c      	add	r4, r5

    CMP R3, #'a'
 80002ae:	2b61      	cmp	r3, #97	; 0x61
    BLT Upper_case
 80002b0:	db02      	blt.n	80002b8 <Upper_case>
    ADD R4, R4, #'a'
 80002b2:	f104 0461 	add.w	r4, r4, #97	; 0x61
    B store_char
 80002b6:	e001      	b.n	80002bc <store_char>

080002b8 <Upper_case>:


Upper_case:

    ADD R4, R4, #'A'
 80002b8:	f104 0441 	add.w	r4, r4, #65	; 0x41

080002bc <store_char>:

store_char:

    STRB R4, [R1]
 80002bc:	700c      	strb	r4, [r1, #0]

080002be <next_char>:

next_char:

    ADD R1, R1, #1
 80002be:	f101 0101 	add.w	r1, r1, #1
    B convert_case
 80002c2:	e7e1      	b.n	8000288 <convert_case>

080002c4 <done>:

done:
POP {R2 ,R3, R5, PC} @ Restore R2,R3,R5 off the stack.
 80002c4:	bd2c      	pop	{r2, r3, r5, pc}

080002c6 <main>:
main:

@set up bens shit (functionize)

@transmitted encoded word and save it to R1
LDR R1, =Word @remove this when transmitting ONLY FOR TESTING
 80002c6:	4909      	ldr	r1, [pc, #36]	; (80002ec <main+0x26>)
BL decode
 80002c8:	f7ff ffdb 	bl	8000282 <decode>
LDR R1, [R4]
 80002cc:	6821      	ldr	r1, [r4, #0]
BL letter_counter @this function will loop forever
 80002ce:	f7ff ffad 	bl	800022c <letter_counter>

B main
 80002d2:	f7ff bff8 	b.w	80002c6 <main>
 80002d6:	0000      	.short	0x0000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80002d8:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80002dc:	48001000 	.word	0x48001000
    LDR R8, =DelayValue @ Load address of DelayValue
 80002e0:	20000004 	.word	0x20000004
	LDR R6, =Default_LED_Pattern
 80002e4:	20000000 	.word	0x20000000
	LDR R0, =Defaultletter @load addy
 80002e8:	20000008 	.word	0x20000008
	LDR R1, =Word @load word
 80002ec:	2000002d 	.word	0x2000002d
    LDR R2, =cipher @cipher value
 80002f0:	20000034 	.word	0x20000034

080002f4 <create_led_pattern>:

.global create_led_pattern
@ R0 = Number of LEDs to turn on
@ Resulting pattern is stored in R6
create_led_pattern:
    MOVS R6, #0x01@ Starting pattern 0b00000001
 80002f4:	2601      	movs	r6, #1
    MOVS R9, R0
 80002f6:	ea5f 0900 	movs.w	r9, r0
    CMP R0, #0
 80002fa:	2800      	cmp	r0, #0
    BEQ pattern_nothing
 80002fc:	d007      	beq.n	800030e <pattern_nothing>
    SUBS R0, R0, #1@ Sub 1 from R0
 80002fe:	3801      	subs	r0, #1

08000300 <create_pattern_loop>:

create_pattern_loop:
    CMP R0, #0
 8000300:	2800      	cmp	r0, #0
    BEQ pattern_done@ If R0 is 0, the pattern is complete
 8000302:	d006      	beq.n	8000312 <pattern_done>
    LSLS R6, R6, #1@ Shift left by 1 bit
 8000304:	0076      	lsls	r6, r6, #1
    ORRS R6, R6, #1@ OR the pattern to turn on the next LED
 8000306:	f056 0601 	orrs.w	r6, r6, #1
    SUBS R0, R0, #1
 800030a:	3801      	subs	r0, #1
    B create_pattern_loop
 800030c:	e7f8      	b.n	8000300 <create_pattern_loop>

0800030e <pattern_nothing>:


pattern_nothing:
	MOVS R6, #0
 800030e:	2600      	movs	r6, #0
	B pattern_done
 8000310:	e7ff      	b.n	8000312 <pattern_done>

08000312 <pattern_done>:

pattern_done:
    BX LR
 8000312:	4770      	bx	lr

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f811 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ffbe 	bl	80002c6 <main>

0800034a <LoopForever>:

LoopForever:
  b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000358:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 800035c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000360:	20000054 	.word	0x20000054

08000364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC1_2_IRQHandler>
	...

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	; (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	; (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	; (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
